#Copyright 2015 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
import("//build/config/c++/c++.gni")
import("//build/config/sanitizers/sanitizers.gni")
import("//build/toolchain/toolchain.gni")
# Used by libc++ and libc++abi.
config("config") {
  cflags = [ "-fstrict-aliasing" ]
  cflags += [ "-fPIC" ]
}
component("libc++") {
  if (is_component_build) {
    no_default_deps = true
  } else {
    static_component_type = "source_set"
  }
  sources = [
  ]
  configs -= [
    "//build/config/compiler:chromium_code",
    "//build/config/compiler:no_exceptions",
    "//build/config/compiler:no_rtti",
    "//build/config/coverage:default_coverage",
  ]
  if (is_android && is_component_build) {
    configs -= [ "//build/config/android:hide_all_but_jni_onload" ]
  }
  configs += [
    ":config",
    "//build/config/compiler:no_chromium_code",
    "//build/config/compiler:exceptions",
    "//build/config/compiler:rtti",
    "//build/config/sanitizers:sanitizer_options_link_helper",
  ]
  defines = [ "_LIBCPP_BUILDING_LIBRARY" ]
  if (!is_clang && is_component_build) {
    # This is a temporary workaround to get libc++ builds working with
    # gcc.  It can be removed with either
    # https://reviews.llvm.org/D35326 or
    # https://reviews.llvm.org/D35388 lands.
    defines += [ "_LIBCPP_EXTERN_TEMPLATE_TYPE_VIS=__attribute__((__visibility__(\"default\")))" ]
  }
  if (!is_component_build) {
    defines += [
      # This resets the visibility to default only for the various
      # flavors of operator new and operator delete.  These symbols
      # are weak and get overriden by Chromium-provided ones, but if
      # these symbols had hidden visibility, this would make the
      # Chromium symbols hidden too because elf visibility rules
      # require that linkers use the least visible form when merging,
      # and if this is hidden, then when we merge it with tcmalloc's
      # operator new, hidden visibility would win. However, tcmalloc
      # needs a visible operator new to also override operator new
      # references from system libraries.
      # TODO(lld): Ask lld for a --force-public-visibility flag or
      # similar to that overrides the default elf merging rules, and
      # make tcmalloc's gn config pass that to all its dependencies,
      # then remove this override here.
      "_LIBCPP_OVERRIDABLE_FUNC_VIS=__attribute__((__visibility__(\"default\")))",
    ]
  }
  if (is_asan || is_tsan || is_msan) {
    # In {a,t,m}san configurations, operator new and operator delete will be
    # provided by the sanitizer runtime library.  Since libc++ defines these
    # symbols with weak linkage, and the *san runtime uses strong linkage, it
    # should technically be OK to omit this, but it's added to be explicit.
    defines += [ "_LIBCPP_DISABLE_NEW_DELETE_DEFINITIONS" ]
  }
}