--- chro3/v8/src/heap/base/worklist.h	2022-08-30 14:42:06.117088538 +0200
+++ chro2/v8/src/heap/base/worklist.h	2022-08-21 23:13:30.000000000 +0200
@@ -81,7 +81,7 @@
 
 template <typename EntryType, uint16_t SegmentSize>
 void Worklist<EntryType, SegmentSize>::Push(Segment* segment) {
-  DCHECK(!segment->IsEmpty());
+  //NICOLAS COMMENTED DCHECK(!segment->IsEmpty());
   v8::base::MutexGuard guard(&lock_);
   segment->set_next(top_);
   set_top(segment);
@@ -92,7 +92,7 @@
 bool Worklist<EntryType, SegmentSize>::Pop(Segment** segment) {
   v8::base::MutexGuard guard(&lock_);
   if (top_ == nullptr) return false;
-  DCHECK_LT(0U, size_);
+  //NICOLAS COMMENTED DCHECK_LT(0U, size_);
   size_.fetch_sub(1, std::memory_order_relaxed);
   *segment = top_;
   set_top(top_->next());
@@ -136,7 +136,7 @@
   while (current != nullptr) {
     current->Update(callback);
     if (current->IsEmpty()) {
-      DCHECK_LT(0U, size_);
+      //NICOLAS COMMENTED DCHECK_LT(0U, size_);
       ++num_deleted;
       if (prev == nullptr) {
         top_ = current->next();
@@ -226,13 +226,13 @@
 
 template <typename EntryType, uint16_t SegmentSize>
 void Worklist<EntryType, SegmentSize>::Segment::Push(EntryType entry) {
-  DCHECK(!IsFull());
+  // NICOLAS COMMENTED DCHECK(!IsFull());
   entries_[index_++] = entry;
 }
 
 template <typename EntryType, uint16_t SegmentSize>
 void Worklist<EntryType, SegmentSize>::Segment::Pop(EntryType* entry) {
-  DCHECK(!IsEmpty());
+  //NICOLAS COMMENTED DCHECK(!IsEmpty());
   *entry = entries_[--index_];
 }
 
@@ -305,22 +305,22 @@
   }
 
   inline Segment* push_segment() {
-    DCHECK_NE(internal::SegmentBase::GetSentinelSegmentAddress(),
-              push_segment_);
+    //NICOLAS COMMENTED DCHECK_NE(internal::SegmentBase::GetSentinelSegmentAddress(),
+    //          push_segment_);
     return static_cast<Segment*>(push_segment_);
   }
   inline const Segment* push_segment() const {
-    DCHECK_NE(internal::SegmentBase::GetSentinelSegmentAddress(),
-              push_segment_);
+    //NICOLAS COMMENTED DCHECK_NE(internal::SegmentBase::GetSentinelSegmentAddress(),
+    //          push_segment_);
     return static_cast<const Segment*>(push_segment_);
   }
 
   inline Segment* pop_segment() {
-    DCHECK_NE(internal::SegmentBase::GetSentinelSegmentAddress(), pop_segment_);
+    //NICOLAS COMMENTED DCHECK_NE(internal::SegmentBase::GetSentinelSegmentAddress(), pop_segment_);
     return static_cast<Segment*>(pop_segment_);
   }
   inline const Segment* pop_segment() const {
-    DCHECK_NE(internal::SegmentBase::GetSentinelSegmentAddress(), pop_segment_);
+    //NICOLAS COMMENTED DCHECK_NE(internal::SegmentBase::GetSentinelSegmentAddress(), pop_segment_);
     return static_cast<const Segment*>(pop_segment_);
   }
 
@@ -360,9 +360,9 @@
 Worklist<EntryType, SegmentSize>::Local::operator=(
     Worklist<EntryType, SegmentSize>::Local&& other) V8_NOEXCEPT {
   if (this != &other) {
-    DCHECK_NULL(worklist_);
-    DCHECK_NULL(push_segment_);
-    DCHECK_NULL(pop_segment_);
+    //NICOLAS COMMENTED DCHECK_NULL(worklist_);
+    //NICOLAS COMMENTED DCHECK_NULL(push_segment_);
+    //NICOLAS COMMENTED DCHECK_NULL(pop_segment_);
     worklist_ = other.worklist_;
     push_segment_ = other.push_segment_;
     pop_segment_ = other.pop_segment_;
